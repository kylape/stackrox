syntax = "proto3";

package v2;

import "google/protobuf/timestamp.proto";
import weak "google/api/annotations.proto";
import "api/v2/vulnerability.proto";

option go_package = "./api/v2;v2";
option java_package = "io.stackrox.proto.api.v2";

message VirtualMachine {
  string id = 1;
  string namespace = 2;
  string name = 3;
  string cluster = 4;

  VirtualMachineScan scan = 5;

  google.protobuf.Timestamp last_updated = 6;
}

message VirtualMachineScan {
  string scanner_version = 1;
  google.protobuf.Timestamp scan_time = 2;
  repeated ScanComponent components = 3;
  string operating_system = 4;
  DataSource data_source = 5;
  enum Note {
    UNSET = 0;
    OS_UNAVAILABLE = 1;
    PARTIAL_SCAN_DATA = 2;
    OS_CVES_UNAVAILABLE = 3;
    OS_CVES_STALE = 4;
    LANGUAGE_CVES_UNAVAILABLE = 5;
    CERTIFIED_RHEL_SCAN_UNAVAILABLE = 6;
  }
  repeated Note notes = 6;
}

message DataSource {
  string id = 1;
  string name = 2;
  string mirror = 3;
}

message ScanComponent {
  string name = 1;
  string version = 2;
  License license = 3;
  repeated EmbeddedVulnerability vulns = 4;
  SourceType source = 5;
  string location = 6;
  oneof set_top_cvss {
    float top_cvss = 7;
  }
  float risk_score = 8;
  // Component version that fixes all the fixable vulnerabilities in this component.
  string fixed_by = 9;
  message Executable {
    string path = 1;
    repeated string dependencies = 2;
  }
  // Values are cleared after moving to cache, remove them from the grpc return as well
  repeated Executable executables = 10;
  string architecture = 11;
}

enum SourceType {
  OS = 0;
  PYTHON = 1;
  JAVA = 2;
  RUBY = 3;
  NODEJS = 4;
  GO = 7;
  DOTNETCORERUNTIME = 5;
  INFRASTRUCTURE = 6;
}

message License {
  string name = 1;
  string type = 2;
  string url = 3;
}

message GetVirtualMachineRequest {
  string id = 1;
  bool strip_description = 2;
}

message CreateVirtualMachineRequest {
  VirtualMachine virtual_machine = 1;
}

message ListVirtualMachinesResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message ListVirtualMachinesRequest {}

message DeleteVirtualMachineRequest {
  string id = 1;
}

message DeleteVirtualMachineResponse {
  bool success = 2;
}

service VirtualMachineService {
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {
      post: "/v1/virtualmachines"
      body: "*"
    };
  }

  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {get: "/v1/virtualmachines/{id}"};
  }

  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse) {
    option (google.api.http) = {get: "/v1/virtualmachines"};
  }

  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (DeleteVirtualMachineResponse) {
    option (google.api.http) = {delete: "/v1/virtualmachines/{id}"};
  }
}
