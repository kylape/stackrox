// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/stackrox/rox/results-controller/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockCentralClient is a mock of CentralClient interface.
type MockCentralClient struct {
	ctrl     *gomock.Controller
	recorder *MockCentralClientMockRecorder
	isgomock struct{}
}

// MockCentralClientMockRecorder is the mock recorder for MockCentralClient.
type MockCentralClientMockRecorder struct {
	mock *MockCentralClient
}

// NewMockCentralClient creates a new mock instance.
func NewMockCentralClient(ctrl *gomock.Controller) *MockCentralClient {
	mock := &MockCentralClient{ctrl: ctrl}
	mock.recorder = &MockCentralClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCentralClient) EXPECT() *MockCentralClientMockRecorder {
	return m.recorder
}

// GetPolicyViolationsForNamespace mocks base method.
func (m *MockCentralClient) GetPolicyViolationsForNamespace(ctx context.Context, namespace, clusterName string) ([]v1alpha1.PolicyViolationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyViolationsForNamespace", ctx, namespace, clusterName)
	ret0, _ := ret[0].([]v1alpha1.PolicyViolationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyViolationsForNamespace indicates an expected call of GetPolicyViolationsForNamespace.
func (mr *MockCentralClientMockRecorder) GetPolicyViolationsForNamespace(ctx, namespace, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyViolationsForNamespace", reflect.TypeOf((*MockCentralClient)(nil).GetPolicyViolationsForNamespace), ctx, namespace, clusterName)
}

// GetVulnerabilitiesForNamespace mocks base method.
func (m *MockCentralClient) GetVulnerabilitiesForNamespace(ctx context.Context, namespace, clusterName string) ([]v1alpha1.VulnerabilityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilitiesForNamespace", ctx, namespace, clusterName)
	ret0, _ := ret[0].([]v1alpha1.VulnerabilityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilitiesForNamespace indicates an expected call of GetVulnerabilitiesForNamespace.
func (mr *MockCentralClientMockRecorder) GetVulnerabilitiesForNamespace(ctx, namespace, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilitiesForNamespace", reflect.TypeOf((*MockCentralClient)(nil).GetVulnerabilitiesForNamespace), ctx, namespace, clusterName)
}

// TestConnection mocks base method.
func (m *MockCentralClient) TestConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockCentralClientMockRecorder) TestConnection(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockCentralClient)(nil).TestConnection), ctx)
}
